<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <TypeDefinitions>
      <ModuleTypes>
        
        <DataSourceModuleType ID="Windows.CertifcateMonitoring.DataSource.ComputerCertificatePropertyBag" Accessibility="Public" Batching="false">
          <Configuration>
            <IncludeSchemaTypes>
              <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
            </IncludeSchemaTypes>
            <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" />
            <xsd:element minOccurs="1" name="SyncTime" type="xsd:string" />
            <xsd:element minOccurs="1" name="Thumbprint" type="xsd:string" />
            <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" />
          </Configuration>
          <OverrideableParameters>
            <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
            <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
            <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          </OverrideableParameters>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <DataSource ID="Script" TypeID="Windows.CertifcateMonitoring.DataSource.Powershell">
                  <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                  <SyncTime>$Config/SyncTime$</SyncTime>
                  <ScriptName>CertificatesMonitorDataSource.ps1</ScriptName>
                  <ScriptBody>
                    <![CDATA[

$SCRIPT_NAME = 'CertificatesMonitorDataSource.ps1'
$EVENT_LEVEL_ERROR=1
$EVENT_LEVEL_WARNING=2
$EVENT_LEVEL_INFO=4
$SCRIPT_STARTED = 821
$MODULE_LOADED = 822
$PROPERTYBAG_CREATED=823
$MULTIWORKER=924
$SCRIPT_ENDED = 830
$Debug = $true

#==================================================================================
# Sub:		LogDebugEvent
# Purpose:	Logs an informational event to the Operations Manager event log 
#			only if Debug argument is true
#==================================================================================

function Log-DebugEvent
{
param($eventNo,$message)
$message ="`n" + $message
if ($debug -eq $true) 
{
$api.LogScriptEvent($SCRIPT_NAME,$eventNo,$EVENT_LEVEL_INFO,$message)
}
}
$api=New-Object -ComObject 'Mom.ScriptApi'

$message='Script started'
Log-DebugEvent $SCRIPT_STARTED $message

$Certificates = Get-ChildItem -Path Cert:\LocalMachine\My | Select-Object -Property Thumbprint, @{Name = 'Path'; Expression = { "$(($_.PSParentPath  -split '\:\:')[1])\$($_.Thumbprint)" }
}, @{Name = 'ExpiryDate'; Expression = { ($_.NotAfter) } }, @{Name = 'IssuerName'; Expression = { $_.IssuerName.Name } }, HasPrivateKey, DnsNameList, @{Name = 'NetbiosComputerName'; Expression = { $env:COMPUTERNAME } }, @{Name = 'SignatureAlgorithm'; Expression = { $_.SignatureAlgorithm.FriendlyName } }, @{Name = 'CertificateTemplateName'; Expression = { (($_.Extensions).Where( { $_.Oid.FriendlyName -eq 'Certificate Template Name' })).Format(0) } }, @{Name = 'SubjectAlternativeName'; Expression = { (($_.Extensions).Where( { $_.Oid.FriendlyName -eq 'Subject Alternative Name' })).Format(0) } } 

Foreach ($Certificate in $Certificates) {

$DaysToExpire=[Math]::Round((($Certificate.ExpiryDate) - (get-date)).TotalDays,2)    

$bag=$api.CreatePropertyBag()
$bag.AddValue('Thumbprint',$Certificate.Thumbprint)
$bag.AddValue('Path',$Certificate.Path)
$bag.AddValue('CertificateTemplateName',$Certificate.CertificateTemplateName)
$bag.AddValue('SubjectAlternativeName',$Certificate.SubjectAlternativeName)
$bag.AddValue('DaysToExpire',$DaysToExpire)
$bag.AddValue('IssuerName',$Certificate.IssuerName)
$bag.AddValue('NetbiosComputerName',$Certificate.NetbiosComputerName)
$bag.AddValue('DnsNameList',$Certificate.DnsNameList.UniCode)
$bag.AddValue('SignatureAlgorithm',$Certificate.SignatureAlgorithm)
$bag

#Return each property bag as we create and populate it.
$message= $Certificate.Thumbprint + ' has ' + $DaysToExpire + ' days to expire.'
Log-DebugEvent $PROPERTYBAG_CREATED $message

}
Log-DebugEvent -eventNo $SCRIPT_ENDED -message 'Script ended.'
]]>
                  </ScriptBody>
                  <SnapIns />
                  <Parameters />
                  <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                </DataSource>
                <ConditionDetection ID="FilterThumbprint" TypeID="System!System.ExpressionFilter">
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='Thumbprint']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/Thumbprint$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </ConditionDetection>
              </MemberModules>
              <Composition>
                <Node ID="FilterThumbprint">
                  <Node ID="Script" />
                </Node>
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
        </DataSourceModuleType>
      </ModuleTypes>
    </TypeDefinitions>
    <LanguagePacks>
      <LanguagePack ID="ENU" IsDefault="true">
        <DisplayStrings>
          <DisplayString ElementID="Windows.CertifcateMonitoring.DataSource.ComputerCertificatePropertyBag">
            <Name>ComputerCertificate PropertyBag DataSource</Name>
            <Description>ComputerCertificate PropertyBag DataSource</Description>
          </DisplayString>
        </DisplayStrings>
      </LanguagePack>
    </LanguagePacks>
  </ManagementPackFragment>

